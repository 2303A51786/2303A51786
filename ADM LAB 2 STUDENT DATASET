{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN3/mhXXN95csfLVxcudPMX",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/2303A51786/2303A51786/blob/main/ADM%20LAB%202%20STUDENT%20DATASET\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BzGVKUU9mDi3",
        "outputId": "491e9f5c-d353-425f-9c86-bf706f33e657"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "DataFrame after Mean Imputation:\n",
            "    id             name               nationality                 city  \\\n",
            "0  0.0        Kiana Lor                     China               Suzhou   \n",
            "1  1.0   Joshua Lonaker  United States of America        Santa Clarita   \n",
            "2  2.0    Dakota Blanco  United States of America              Oakland   \n",
            "3  3.0  Natasha Yarusso  United States of America        Castro Valley   \n",
            "4  4.0   Brooke Cazares                    Brazil  São José dos Campos   \n",
            "\n",
            "   latitude  longitude gender   age  english.grade  math.grade  \\\n",
            "0     31.31     120.62      F  22.0            3.5         3.7   \n",
            "1     34.39    -118.54      M  22.0            2.9         3.2   \n",
            "2     37.80    -122.27      F  22.0            3.9         3.8   \n",
            "3     37.69    -122.09      F  20.0            3.3         2.8   \n",
            "4    -23.18     -45.88      F  21.0            3.7         2.6   \n",
            "\n",
            "   sciences.grade  language.grade  portfolio.rating  coverletter.rating  \\\n",
            "0        3.100000             1.0               4.0                 4.0   \n",
            "1        3.600000             5.0               5.0                 4.0   \n",
            "2        3.200000             5.0               3.0                 3.0   \n",
            "3        3.447987             5.0               5.0                 2.0   \n",
            "4        3.400000             1.0               4.0                 4.0   \n",
            "\n",
            "   refletter.rating  \n",
            "0               4.0  \n",
            "1               5.0  \n",
            "2               4.0  \n",
            "3               4.0  \n",
            "4               5.0  \n",
            "\n",
            "DataFrame after Min-Max Scaling:\n",
            "         id             name               nationality                 city  \\\n",
            "0  0.000000        Kiana Lor                     China               Suzhou   \n",
            "1  0.003268   Joshua Lonaker  United States of America        Santa Clarita   \n",
            "2  0.006536    Dakota Blanco  United States of America              Oakland   \n",
            "3  0.009804  Natasha Yarusso  United States of America        Castro Valley   \n",
            "4  0.013072   Brooke Cazares                    Brazil  São José dos Campos   \n",
            "\n",
            "   latitude  longitude gender       age  english.grade  math.grade  \\\n",
            "0  0.693808   0.927229      F  0.428571           0.80    0.842105   \n",
            "1  0.726805   0.017460      M  0.428571           0.56    0.578947   \n",
            "2  0.763338   0.003271      F  0.428571           0.96    0.894737   \n",
            "3  0.762160   0.003956      F  0.142857           0.72    0.368421   \n",
            "4  0.110028   0.293860      F  0.285714           0.88    0.263158   \n",
            "\n",
            "   sciences.grade  language.grade  portfolio.rating  coverletter.rating  \\\n",
            "0        0.653846             0.0              0.75                0.75   \n",
            "1        0.846154             1.0              1.00                0.75   \n",
            "2        0.692308             1.0              0.50                0.50   \n",
            "3        0.787687             1.0              1.00                0.25   \n",
            "4        0.769231             0.0              0.75                0.75   \n",
            "\n",
            "   refletter.rating  \n",
            "0              0.75  \n",
            "1              1.00  \n",
            "2              0.75  \n",
            "3              0.75  \n",
            "4              1.00  \n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from sklearn.impute import SimpleImputer\n",
        "\n",
        "\n",
        "# 1. Handle missing values using Mean Imputation for numeric columns only\n",
        "# Select numeric columns\n",
        "numeric_cols = df.select_dtypes(include=['number']).columns\n",
        "\n",
        "# Apply imputation to numeric columns\n",
        "imputer = SimpleImputer(strategy='mean')\n",
        "df[numeric_cols] = imputer.fit_transform(df[numeric_cols])\n",
        "\n",
        "# Display the DataFrame after missing value imputation\n",
        "print(\"\\nDataFrame after Mean Imputation:\")\n",
        "print(df.head())\n",
        "\n",
        "# 2. Feature Scaling (Min-Max Normalization)\n",
        "# Select numeric columns for scaling\n",
        "numeric_cols = df.select_dtypes(include=['number']).columns\n",
        "\n",
        "# Apply scaling to numeric columns\n",
        "scaler = MinMaxScaler()\n",
        "df[numeric_cols] = scaler.fit_transform(df[numeric_cols])\n",
        "\n",
        "# Display the scaled DataFrame\n",
        "print(\"\\nDataFrame after Min-Max Scaling:\")\n",
        "print(df.head())\n",
        "\n",
        "\n",
        "# Optionally, if you want to use Standardization instead, use:\n",
        "# from sklearn.preprocessing import StandardScaler\n",
        "# scaler = StandardScaler()\n",
        "# df_scaled = pd.DataFrame(scaler.fit_transform(df_imputed), columns=df_imputed.columns)"
      ]
    }
  ]
}